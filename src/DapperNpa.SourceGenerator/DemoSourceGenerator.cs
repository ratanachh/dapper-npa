
using Microsoft.CodeAnalysis;

namespace DapperNpa.SourceGenerator
{
    [Generator(LanguageNames.CSharp)]
    internal sealed partial class DemoSourceGenerator : IIncrementalGenerator
    {
        private static readonly string GeneratedCodeAttribute = $@"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(""{typeof(DemoSourceGenerator).Assembly.GetName().Name}"", ""{typeof(DemoSourceGenerator).Assembly.GetName().Version}"")]";
        private static readonly string EqualityComparerAttribute = $@"// <auto-generated/>
// {DateTime.UtcNow}
#nullable enable

namespace Roslyn.Generated;

{GeneratedCodeAttribute}
[global::System.AttributeUsageAttribute(global::System.AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class EqualityCompareAttribute : global::System.Attribute
{{
    public EqualityCompareAttribute(global::System.Type type)
    {{
        Type = type; 
    }}

    public global::System.Type Type {{ get; }}
}}
";
        public void Initialize(IncrementalGeneratorInitializationContext context)
        {
        //   throw new Exception("Test exception!"); // delete me after test
            context.RegisterPostInitializationOutput(PostInitializationCallback);
}
        private static void PostInitializationCallback(IncrementalGeneratorPostInitializationContext context)
        {
            context.AddSource("EqualityCompareAttribute.g.cs", EqualityComparerAttribute);
        }

    }
}
